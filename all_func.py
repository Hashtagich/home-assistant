import json

import wikipedia
import re
from datetime import datetime, timedelta

name_json, task_json = 'datas.json', 'tasks.json'


def open_json_file(name_file: str = name_json) -> dict:
    """–§—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã–≤–∞–µ—Ç —Ñ–∞–π–ª —Ñ–æ—Ä–º–∞—Ç–∞ json –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å.
    –ò–∑–Ω–∞—á–∞–ª—å–Ω–æ –æ—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –¥–ª—è –ø—Ä–æ–≥—Ä–∞–º–º—ã."""
    with open(name_file, 'r', encoding='utf-8') as file:
        return json.load(file)


data = open_json_file()
dict_tasks = open_json_file(name_file=task_json)
name_assistant = data['Name_assistant']
tuple_del_phrase = tuple(data['list_del_phrase'])
tuple_rename = tuple(data['rename'])
tuple_music = tuple(data['play_music'])
dict_sec = data['dict_sec']
dict_min = data['dict_min']
dict_hours = data['dict_hours']
dict_number_calendar = data['dict_number_calendar']
mask = data['mask']


def write_json_file(dt: dict, name_file: str = name_json):
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª–µ —Ñ–æ—Ä–º–∞—Ç–∞ json."""
    with open(name_file, 'w', encoding='utf8') as file:
        file.write(json.dumps(dt, indent=4, sort_keys=False, ensure_ascii=False))


def rename_assistant(new_name_assistant: str, old_dt: dict):
    """–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ—Ç –∏–º—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –ø–æ–º–æ—â–Ω–∏–∫–∞ –∏
    –∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–∞ json, –≥–¥–µ –µ–≥–æ –∏–º—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è."""
    old_dt['Name_assistant'] = new_name_assistant
    write_json_file(dt=old_dt, name_file=name_json)


def get_in_wiki(string: str, tuple_del_phrase: tuple) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –£–¥–∞–ª—è—Ç —Å–ª–æ–≤–∞ —Å–æ–≤–ø–∞–¥–∞—é—â–∏–µ —Å –∫–æ—Ä—Ç–µ–∂–µ–º list_del_phrase
    –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—ã–π –∞–±–∑–∞—Ü —Å—Ç—Ä–∞–Ω–∏—á–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."""
    wikipedia.set_lang("ru")
    mask_phrase = " |".join(tuple_del_phrase)

    phrase = re.sub(mask_phrase, r'', string)

    article = wikipedia.page(phrase).content
    result = article[:article.find('\n')]
    return result


def question_in_or_no(tuple_words: tuple, word: str) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –∑–∞–ø—Ä–æ—Å —Å–ª–æ–≤–∞ –∏–∑ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ –∫–æ—Ä—Ç–µ–∂–∞"""
    return any([True for i in tuple_words if i.lower() in word.lower()])


def what_name_time(dict_time: dict, number: int) -> str:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≥–æ–Ω–∫–∏ –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞—Ä—è –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è –∫–ª—é—á–∞,
    –∫–æ—Ç–æ—Ä—ã–π –æ–±–æ–∑–Ω–∞—á–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–æ–º–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∑–∞–¥–∞–Ω–Ω–æ–º —Å–ø–∏—Å–∫–µ."""
    for key, val in dict_time.items():
        if number in val:
            return key
        else:
            continue


def time_has_come(date_from_dict: str, days: int = 0, hours: int = 1, minutes: int = 0, seconds: int = 0) -> bool:
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏.
    –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—Ç—Ä–æ–∫–∏ –∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –æ—Ç–±–æ—Ä–∞.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∞ –∫ —Ç–µ–∫—É—â–µ–π +- 1 —á–∞—Å, —Ç–æ –ø–æ–º–æ—â–Ω–∏–∫ –Ω–∞–ø–æ–º–Ω–∏—Ç —á—Ç–æ –º—ã –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª–∏ –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è.
    """
    datetime_now = datetime.today()
    delta = timedelta(days=days, hours=hours, minutes=minutes, seconds=seconds)

    return datetime_now + delta >= datetime.strptime(date_from_dict, mask) >= datetime_now - delta
        # return True


def what_time_is_it() -> str:
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏."""
    datetime_now = datetime.today()

    hour_str = what_name_time(dict_time=dict_hours, number=datetime_now.hour)
    minute_str = what_name_time(dict_time=dict_min, number=datetime_now.minute)
    second_str = what_name_time(dict_time=dict_sec, number=datetime_now.second)

    return f'–¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è {datetime_now.hour} {hour_str} {datetime_now.minute} {minute_str} {datetime_now.second} {second_str}'


def what_today() -> str:
    """–§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã."""
    from calendar import month_name
    import locale
    datetime_now = datetime.today()
    locale.setlocale(locale.LC_ALL, 'ru_RU.UTF-8')
    mount = f'{month_name[datetime_now.month][:-1]}–∞' \
        if datetime_now.month in [3, 8] else f'{month_name[datetime_now.month][:-1]}—è'

    return f'–°–µ–≥–æ–¥–Ω—è {dict_number_calendar[str(datetime_now.day)]} {mount.lower()} {datetime_now.year} –≥–æ–¥–∞'

# –º—É—Å–æ—Ä
# commands_dict = {
#     'commands': {
#         'greeting': ['–ø—Ä–∏–≤–µ—Ç', '–ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é'],
#         'create_task': ['–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É', '—Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É', '–∑–∞–º–µ—Ç–∫–∞'],
#         'play_music': ['–≤–∫–ª—é—á–∏—Ç—å –º—É–∑—ã–∫—É', '–¥–∏—Å–∫–æ—Ç–µ–∫–∞']
#     }
# }
#
#
# def listen_command():
#     """The function will return the recognized command"""
#
#     try:
#         with speech_recognition.Microphone() as mic:
#             sr.adjust_for_ambient_noise(source=mic, duration=0.5)
#             audio = sr.listen(source=mic)
#             query = sr.recognize_google(audio_data=audio, language='ru-RU').lower()
#
#         return query
#     except speech_recognition.UnknownValueError:
#         return 'Damn... –ù–µ –ø–æ–Ω—è–ª —á—Ç–æ —Ç—ã —Å–∫–∞–∑–∞–ª :/'
#
#
# def greeting():
#     """Greeting function"""
#
#     return '–ü—Ä–∏–≤–µ—Ç!'
#
#
# def create_task():
#     """Create a todo task"""
#
#     print('–ß—Ç–æ –¥–æ–±–∞–≤–∏–º –≤ —Å–ø–∏—Å–æ–∫ –¥–µ–ª?')
#
#     query = listen_command()
#
#     with open('todo-list.txt', 'a') as file:
#         file.write(f'‚ùóÔ∏è {query}\n')
#
#     return f'–ó–∞–¥–∞—á–∞ {query} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ todo-list!'
#
#
# def play_music():
#     """Play a random mp3 file"""
#     return f'–¢–∞–Ω—Ü—É–µ–º üîäüîäüîä'
#
#
